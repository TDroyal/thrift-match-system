// Code generated by Thrift Compiler (0.20.0). DO NOT EDIT.

package match

import (
	"bytes"
	"context"
	"errors"
	"fmt"
        "log/slog"
        "time"
        thrift "github.com/apache/thrift/lib/go/thrift"
        "strings"
        "regexp"
    )

    // (needed to ensure safety because of naive import list construction.)
    var _ = bytes.Equal
    var _ = context.Background
    var _ = errors.New
    var _ = fmt.Printf
    var _ = slog.Log
    var _ = time.Now
    var _ = thrift.ZERO
    // (needed by validator.)
    var _ = strings.Contains
    var _ = regexp.MatchString

    // Attributes:
    //  - ID
    //  - Username
    //  - Score
    type User struct {
      ID int32 `thrift:"id,1" db:"id" json:"id"`
      Username string `thrift:"username,2" db:"username" json:"username"`
      Score int32 `thrift:"score,3" db:"score" json:"score"`
    }

    func NewUser() *User {
      return &User{}
    }

    func (p *User) GetID() int32 {
      return p.ID
    }

    func (p *User) GetUsername() string {
      return p.Username
    }

    func (p *User) GetScore() int32 {
      return p.Score
    }
    func (p *User) Read(ctx context.Context, iprot thrift.TProtocol) error {
      if _, err := iprot.ReadStructBegin(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
      }


      for {
        _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
        if err != nil {
          return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
        }
        if fieldTypeId == thrift.STOP { break; }
        switch fieldId {
        case 1:
          if fieldTypeId == thrift.I32 {
            if err := p.ReadField1(ctx, iprot); err != nil {
              return err
            }
          } else {
            if err := iprot.Skip(ctx, fieldTypeId); err != nil {
              return err
            }
          }
        case 2:
          if fieldTypeId == thrift.STRING {
            if err := p.ReadField2(ctx, iprot); err != nil {
              return err
            }
          } else {
            if err := iprot.Skip(ctx, fieldTypeId); err != nil {
              return err
            }
          }
        case 3:
          if fieldTypeId == thrift.I32 {
            if err := p.ReadField3(ctx, iprot); err != nil {
              return err
            }
          } else {
            if err := iprot.Skip(ctx, fieldTypeId); err != nil {
              return err
            }
          }
        default:
          if err := iprot.Skip(ctx, fieldTypeId); err != nil {
            return err
          }
        }
        if err := iprot.ReadFieldEnd(ctx); err != nil {
          return err
        }
      }
      if err := iprot.ReadStructEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
      }
      return nil
    }

    func (p *User)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 1: ", err)
    } else {
      p.ID = v
    }
      return nil
    }

    func (p *User)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 2: ", err)
    } else {
      p.Username = v
    }
      return nil
    }

    func (p *User)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 3: ", err)
    } else {
      p.Score = v
    }
      return nil
    }

    func (p *User) Write(ctx context.Context, oprot thrift.TProtocol) error {
      if err := oprot.WriteStructBegin(ctx, "User"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
      if p != nil {
        if err := p.writeField1(ctx, oprot); err != nil { return err }
        if err := p.writeField2(ctx, oprot); err != nil { return err }
        if err := p.writeField3(ctx, oprot); err != nil { return err }
      }
      if err := oprot.WriteFieldStop(ctx); err != nil {
        return thrift.PrependError("write field stop error: ", err) }
      if err := oprot.WriteStructEnd(ctx); err != nil {
        return thrift.PrependError("write struct stop error: ", err) }
      return nil
    }

    func (p *User) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
      if err := oprot.WriteFieldBegin(ctx, "id", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
      if err := oprot.WriteI32(ctx, int32(p.ID)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
      if err := oprot.WriteFieldEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
      return err
    }

    func (p *User) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
      if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
      if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
      if err := oprot.WriteFieldEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
      return err
    }

    func (p *User) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
      if err := oprot.WriteFieldBegin(ctx, "score", thrift.I32, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:score: ", p), err) }
      if err := oprot.WriteI32(ctx, int32(p.Score)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T.score (3) field write error: ", p), err) }
      if err := oprot.WriteFieldEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error 3:score: ", p), err) }
      return err
    }

    func (p *User) Equals(other *User) bool {
      if p == other {
        return true
      } else if p == nil || other == nil {
        return false
      }
      if p.ID != other.ID { return false }
      if p.Username != other.Username { return false }
      if p.Score != other.Score { return false }
      return true
    }

    func (p *User) String() string {
      if p == nil {
        return "<nil>"
      }
      return fmt.Sprintf("User(%+v)", *p)
    }

    func (p *User) LogValue() slog.Value {
      if p == nil {
        return slog.AnyValue(nil)
      }
      v := thrift.SlogTStructWrapper{
        Type: "*match.User",
        Value: p,
      }
      return slog.AnyValue(v)
    }

    var _ slog.LogValuer = (*User)(nil)

    func (p *User) Validate() error {
      return nil
    }
    type Match interface {
      // Parameters:
      //  - User
      Add(ctx context.Context, user *User) (_r int32, _err error)
      // Parameters:
      //  - User
      Remove(ctx context.Context, user *User) (_r int32, _err error)
    }

    type MatchClient struct {
      c thrift.TClient
      meta thrift.ResponseMeta
    }

    func NewMatchClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MatchClient {
      return &MatchClient{
        c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
      }
    }

    func NewMatchClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MatchClient {
      return &MatchClient{
        c: thrift.NewTStandardClient(iprot, oprot),
      }
    }

    func NewMatchClient(c thrift.TClient) *MatchClient {
      return &MatchClient{
        c: c,
      }
    }

    func (p *MatchClient) Client_() thrift.TClient {
      return p.c
    }

    func (p *MatchClient) LastResponseMeta_() thrift.ResponseMeta {
      return p.meta
    }

    func (p *MatchClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
      p.meta = meta
    }

    // Parameters:
    //  - User
    func (p *MatchClient) Add(ctx context.Context, user *User) (_r int32, _err error) {
      var _args0 MatchAddArgs
      _args0.User = user
      var _result2 MatchAddResult
      var _meta1 thrift.ResponseMeta
      _meta1, _err = p.Client_().Call(ctx, "add", &_args0, &_result2)
      p.SetLastResponseMeta_(_meta1)
      if _err != nil {
        return
      }
      return _result2.GetSuccess(), nil
    }

    // Parameters:
    //  - User
    func (p *MatchClient) Remove(ctx context.Context, user *User) (_r int32, _err error) {
      var _args3 MatchRemoveArgs
      _args3.User = user
      var _result5 MatchRemoveResult
      var _meta4 thrift.ResponseMeta
      _meta4, _err = p.Client_().Call(ctx, "remove", &_args3, &_result5)
      p.SetLastResponseMeta_(_meta4)
      if _err != nil {
        return
      }
      return _result5.GetSuccess(), nil
    }

    type MatchProcessor struct {
      processorMap map[string]thrift.TProcessorFunction
      handler Match
    }

    func (p *MatchProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
      p.processorMap[key] = processor
    }

    func (p *MatchProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
      processor, ok = p.processorMap[key]
      return processor, ok
    }

    func (p *MatchProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
      return p.processorMap
    }

    func NewMatchProcessor(handler Match) *MatchProcessor {

      self6 := &MatchProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
      self6.processorMap["add"] = &matchProcessorAdd{handler:handler}
      self6.processorMap["remove"] = &matchProcessorRemove{handler:handler}
    return self6
    }

    func (p *MatchProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
      name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
      if err2 != nil { return false, thrift.WrapTException(err2) }
      if processor, ok := p.GetProcessorFunction(name); ok {
        return processor.Process(ctx, seqId, iprot, oprot)
      }
      iprot.Skip(ctx, thrift.STRUCT)
      iprot.ReadMessageEnd(ctx)
      x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
      oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
      x7.Write(ctx, oprot)
      oprot.WriteMessageEnd(ctx)
      oprot.Flush(ctx)
      return false, x7

    }

    type matchProcessorAdd struct {
      handler Match
    }

    func (p *matchProcessorAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
      var _write_err8 error
      args := MatchAddArgs{}
      if err2 := args.Read(ctx, iprot); err2 != nil {
        iprot.ReadMessageEnd(ctx)
        x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
        oprot.WriteMessageBegin(ctx, "add", thrift.EXCEPTION, seqId)
        x.Write(ctx, oprot)
        oprot.WriteMessageEnd(ctx)
        oprot.Flush(ctx)
        return false, thrift.WrapTException(err2)
      }
      iprot.ReadMessageEnd(ctx)

      tickerCancel := func() {}
      // Start a goroutine to do server side connectivity check.
      if thrift.ServerConnectivityCheckInterval > 0 {
        var cancel context.CancelCauseFunc
        ctx, cancel = context.WithCancelCause(ctx)
        defer cancel(nil)
        var tickerCtx context.Context
        tickerCtx, tickerCancel = context.WithCancel(context.Background())
        defer tickerCancel()
        go func(ctx context.Context, cancel context.CancelCauseFunc) {
          ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
          defer ticker.Stop()
          for {
            select {
            case <-ctx.Done():
              return
            case <-ticker.C:
              if !iprot.Transport().IsOpen() {
                cancel(thrift.ErrAbandonRequest)
                return
              }
            }
          }
        }(tickerCtx, cancel)
      }

      result := MatchAddResult{}
      if retval, err2 := p.handler.Add(ctx, args.User); err2 != nil {
        tickerCancel()
        err = thrift.WrapTException(err2)
        if errors.Is(err2, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err2)
        }
        if errors.Is(err2, context.Canceled) {
          if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
            return false, thrift.WrapTException(err)
          }
        }
        _exc9 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add: " + err2.Error())
        if err2 := oprot.WriteMessageBegin(ctx, "add", thrift.EXCEPTION, seqId); err2 != nil {
          _write_err8 = thrift.WrapTException(err2)
        }
        if err2 := _exc9.Write(ctx, oprot); _write_err8 == nil && err2 != nil {
          _write_err8 = thrift.WrapTException(err2)
        }
        if err2 := oprot.WriteMessageEnd(ctx); _write_err8 == nil && err2 != nil {
          _write_err8 = thrift.WrapTException(err2)
        }
        if err2 := oprot.Flush(ctx); _write_err8 == nil && err2 != nil {
          _write_err8 = thrift.WrapTException(err2)
        }
        if _write_err8 != nil {
          return false, thrift.WrapTException(_write_err8)
        }
        return true, err
      } else {
        result.Success = &retval
      }
      tickerCancel()
      if err2 := oprot.WriteMessageBegin(ctx, "add", thrift.REPLY, seqId); err2 != nil {
        _write_err8 = thrift.WrapTException(err2)
      }
      if err2 := result.Write(ctx, oprot); _write_err8 == nil && err2 != nil {
        _write_err8 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err8 == nil && err2 != nil {
        _write_err8 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err8 == nil && err2 != nil {
        _write_err8 = thrift.WrapTException(err2)
      }
      if _write_err8 != nil {
        return false, thrift.WrapTException(_write_err8)
      }
      return true, err
    }

    type matchProcessorRemove struct {
      handler Match
    }

    func (p *matchProcessorRemove) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
      var _write_err10 error
      args := MatchRemoveArgs{}
      if err2 := args.Read(ctx, iprot); err2 != nil {
        iprot.ReadMessageEnd(ctx)
        x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
        oprot.WriteMessageBegin(ctx, "remove", thrift.EXCEPTION, seqId)
        x.Write(ctx, oprot)
        oprot.WriteMessageEnd(ctx)
        oprot.Flush(ctx)
        return false, thrift.WrapTException(err2)
      }
      iprot.ReadMessageEnd(ctx)

      tickerCancel := func() {}
      // Start a goroutine to do server side connectivity check.
      if thrift.ServerConnectivityCheckInterval > 0 {
        var cancel context.CancelCauseFunc
        ctx, cancel = context.WithCancelCause(ctx)
        defer cancel(nil)
        var tickerCtx context.Context
        tickerCtx, tickerCancel = context.WithCancel(context.Background())
        defer tickerCancel()
        go func(ctx context.Context, cancel context.CancelCauseFunc) {
          ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
          defer ticker.Stop()
          for {
            select {
            case <-ctx.Done():
              return
            case <-ticker.C:
              if !iprot.Transport().IsOpen() {
                cancel(thrift.ErrAbandonRequest)
                return
              }
            }
          }
        }(tickerCtx, cancel)
      }

      result := MatchRemoveResult{}
      if retval, err2 := p.handler.Remove(ctx, args.User); err2 != nil {
        tickerCancel()
        err = thrift.WrapTException(err2)
        if errors.Is(err2, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err2)
        }
        if errors.Is(err2, context.Canceled) {
          if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
            return false, thrift.WrapTException(err)
          }
        }
        _exc11 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err2.Error())
        if err2 := oprot.WriteMessageBegin(ctx, "remove", thrift.EXCEPTION, seqId); err2 != nil {
          _write_err10 = thrift.WrapTException(err2)
        }
        if err2 := _exc11.Write(ctx, oprot); _write_err10 == nil && err2 != nil {
          _write_err10 = thrift.WrapTException(err2)
        }
        if err2 := oprot.WriteMessageEnd(ctx); _write_err10 == nil && err2 != nil {
          _write_err10 = thrift.WrapTException(err2)
        }
        if err2 := oprot.Flush(ctx); _write_err10 == nil && err2 != nil {
          _write_err10 = thrift.WrapTException(err2)
        }
        if _write_err10 != nil {
          return false, thrift.WrapTException(_write_err10)
        }
        return true, err
      } else {
        result.Success = &retval
      }
      tickerCancel()
      if err2 := oprot.WriteMessageBegin(ctx, "remove", thrift.REPLY, seqId); err2 != nil {
        _write_err10 = thrift.WrapTException(err2)
      }
      if err2 := result.Write(ctx, oprot); _write_err10 == nil && err2 != nil {
        _write_err10 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err10 == nil && err2 != nil {
        _write_err10 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err10 == nil && err2 != nil {
        _write_err10 = thrift.WrapTException(err2)
      }
      if _write_err10 != nil {
        return false, thrift.WrapTException(_write_err10)
      }
      return true, err
    }


    // HELPER FUNCTIONS AND STRUCTURES

    // Attributes:
    //  - User
    type MatchAddArgs struct {
      User *User `thrift:"user,1" db:"user" json:"user"`
    }

    func NewMatchAddArgs() *MatchAddArgs {
      return &MatchAddArgs{}
    }

    var MatchAddArgs_User_DEFAULT *User
    func (p *MatchAddArgs) GetUser() *User {
      if !p.IsSetUser() {
        return MatchAddArgs_User_DEFAULT
      }
      return p.User
    }
    func (p *MatchAddArgs) IsSetUser() bool {
      return p.User != nil
    }

    func (p *MatchAddArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
      if _, err := iprot.ReadStructBegin(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
      }


      for {
        _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
        if err != nil {
          return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
        }
        if fieldTypeId == thrift.STOP { break; }
        switch fieldId {
        case 1:
          if fieldTypeId == thrift.STRUCT {
            if err := p.ReadField1(ctx, iprot); err != nil {
              return err
            }
          } else {
            if err := iprot.Skip(ctx, fieldTypeId); err != nil {
              return err
            }
          }
        default:
          if err := iprot.Skip(ctx, fieldTypeId); err != nil {
            return err
          }
        }
        if err := iprot.ReadFieldEnd(ctx); err != nil {
          return err
        }
      }
      if err := iprot.ReadStructEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
      }
      return nil
    }

    func (p *MatchAddArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
      p.User = &User{}
      if err := p.User.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
      }
      return nil
    }

    func (p *MatchAddArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
      if err := oprot.WriteStructBegin(ctx, "add_args"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
      if p != nil {
        if err := p.writeField1(ctx, oprot); err != nil { return err }
      }
      if err := oprot.WriteFieldStop(ctx); err != nil {
        return thrift.PrependError("write field stop error: ", err) }
      if err := oprot.WriteStructEnd(ctx); err != nil {
        return thrift.PrependError("write struct stop error: ", err) }
      return nil
    }

    func (p *MatchAddArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
      if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
      if err := p.User.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
      }
      if err := oprot.WriteFieldEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
      return err
    }

    func (p *MatchAddArgs) String() string {
      if p == nil {
        return "<nil>"
      }
      return fmt.Sprintf("MatchAddArgs(%+v)", *p)
    }

    func (p *MatchAddArgs) LogValue() slog.Value {
      if p == nil {
        return slog.AnyValue(nil)
      }
      v := thrift.SlogTStructWrapper{
        Type: "*match.MatchAddArgs",
        Value: p,
      }
      return slog.AnyValue(v)
    }

    var _ slog.LogValuer = (*MatchAddArgs)(nil)

    // Attributes:
    //  - Success
    type MatchAddResult struct {
      Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
    }

    func NewMatchAddResult() *MatchAddResult {
      return &MatchAddResult{}
    }

    var MatchAddResult_Success_DEFAULT int32
    func (p *MatchAddResult) GetSuccess() int32 {
      if !p.IsSetSuccess() {
        return MatchAddResult_Success_DEFAULT
      }
      return *p.Success
    }
    func (p *MatchAddResult) IsSetSuccess() bool {
      return p.Success != nil
    }

    func (p *MatchAddResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
      if _, err := iprot.ReadStructBegin(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
      }


      for {
        _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
        if err != nil {
          return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
        }
        if fieldTypeId == thrift.STOP { break; }
        switch fieldId {
        case 0:
          if fieldTypeId == thrift.I32 {
            if err := p.ReadField0(ctx, iprot); err != nil {
              return err
            }
          } else {
            if err := iprot.Skip(ctx, fieldTypeId); err != nil {
              return err
            }
          }
        default:
          if err := iprot.Skip(ctx, fieldTypeId); err != nil {
            return err
          }
        }
        if err := iprot.ReadFieldEnd(ctx); err != nil {
          return err
        }
      }
      if err := iprot.ReadStructEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
      }
      return nil
    }

    func (p *MatchAddResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      p.Success = &v
    }
      return nil
    }

    func (p *MatchAddResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
      if err := oprot.WriteStructBegin(ctx, "add_result"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
      if p != nil {
        if err := p.writeField0(ctx, oprot); err != nil { return err }
      }
      if err := oprot.WriteFieldStop(ctx); err != nil {
        return thrift.PrependError("write field stop error: ", err) }
      if err := oprot.WriteStructEnd(ctx); err != nil {
        return thrift.PrependError("write struct stop error: ", err) }
      return nil
    }

    func (p *MatchAddResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
      if p.IsSetSuccess() {
        if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
        if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
        if err := oprot.WriteFieldEnd(ctx); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
      }
      return err
    }

    func (p *MatchAddResult) String() string {
      if p == nil {
        return "<nil>"
      }
      return fmt.Sprintf("MatchAddResult(%+v)", *p)
    }

    func (p *MatchAddResult) LogValue() slog.Value {
      if p == nil {
        return slog.AnyValue(nil)
      }
      v := thrift.SlogTStructWrapper{
        Type: "*match.MatchAddResult",
        Value: p,
      }
      return slog.AnyValue(v)
    }

    var _ slog.LogValuer = (*MatchAddResult)(nil)

    // Attributes:
    //  - User
    type MatchRemoveArgs struct {
      User *User `thrift:"user,1" db:"user" json:"user"`
    }

    func NewMatchRemoveArgs() *MatchRemoveArgs {
      return &MatchRemoveArgs{}
    }

    var MatchRemoveArgs_User_DEFAULT *User
    func (p *MatchRemoveArgs) GetUser() *User {
      if !p.IsSetUser() {
        return MatchRemoveArgs_User_DEFAULT
      }
      return p.User
    }
    func (p *MatchRemoveArgs) IsSetUser() bool {
      return p.User != nil
    }

    func (p *MatchRemoveArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
      if _, err := iprot.ReadStructBegin(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
      }


      for {
        _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
        if err != nil {
          return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
        }
        if fieldTypeId == thrift.STOP { break; }
        switch fieldId {
        case 1:
          if fieldTypeId == thrift.STRUCT {
            if err := p.ReadField1(ctx, iprot); err != nil {
              return err
            }
          } else {
            if err := iprot.Skip(ctx, fieldTypeId); err != nil {
              return err
            }
          }
        default:
          if err := iprot.Skip(ctx, fieldTypeId); err != nil {
            return err
          }
        }
        if err := iprot.ReadFieldEnd(ctx); err != nil {
          return err
        }
      }
      if err := iprot.ReadStructEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
      }
      return nil
    }

    func (p *MatchRemoveArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
      p.User = &User{}
      if err := p.User.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
      }
      return nil
    }

    func (p *MatchRemoveArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
      if err := oprot.WriteStructBegin(ctx, "remove_args"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
      if p != nil {
        if err := p.writeField1(ctx, oprot); err != nil { return err }
      }
      if err := oprot.WriteFieldStop(ctx); err != nil {
        return thrift.PrependError("write field stop error: ", err) }
      if err := oprot.WriteStructEnd(ctx); err != nil {
        return thrift.PrependError("write struct stop error: ", err) }
      return nil
    }

    func (p *MatchRemoveArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
      if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
      if err := p.User.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
      }
      if err := oprot.WriteFieldEnd(ctx); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *MatchRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchRemoveArgs(%+v)", *p)
}

func (p *MatchRemoveArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*match.MatchRemoveArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*MatchRemoveArgs)(nil)

// Attributes:
//  - Success
type MatchRemoveResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMatchRemoveResult() *MatchRemoveResult {
  return &MatchRemoveResult{}
}

var MatchRemoveResult_Success_DEFAULT int32
func (p *MatchRemoveResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return MatchRemoveResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *MatchRemoveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MatchRemoveResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchRemoveResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MatchRemoveResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchRemoveResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MatchRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchRemoveResult(%+v)", *p)
}

func (p *MatchRemoveResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*match.MatchRemoveResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*MatchRemoveResult)(nil)


