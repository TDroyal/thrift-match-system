// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>
#include <queue>
#include <mutex>
#include <thread>
#include <condition_variable>
#include <time.h>
#include <unistd.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match;
using namespace std;

// product-consume
typedef struct Task {
    std::string op;  //task type: "add" or "remove"
    User user;
}task;

// message_queue:  common resource
struct MessageQueue {
    queue<task> q;
    mutex m;
    condition_variable cv;   //条件变量
}message_queue;


// 封装一下进入匹配池的用户信息（额外加一个进入匹配池的时间戳）
typedef struct UserInfo {
    User user;
    time_t start_time;   //进入匹配池的时间戳
}Player;

class Pool {
    private:
        vector<Player> users;
        //每个用户进入匹配池后，都需要记一个时间戳，防止分数相差过大，一直匹配不上的问题（解决匹配饥饿问题）
    public:
        void add(User &user)
        {
            users.push_back({user, time(NULL)});
        }

        void remove(User &user)
        {
            int32_t id =  user.id;
            for(int32_t i = 0; i < users.size(); i ++ )
            {
                if(id == users[i].user.id) {
                    users.erase(users.begin() + i);
                    break;
                }
            }
        }
        
        void save_match_result(Player &a, Player &b, time_t &end_time)
        {
            printf("match result: %d %d\n", a.user.id, b.user.id);
            printf("user %d costs time: %.1f, user %d costs time: %.1f\n", a.user.id, difftime(end_time, a.start_time), b.user.id, difftime(end_time, b.start_time));
        }
    
        bool check(int32_t i, int32_t j, time_t &end_time)  //随着时间匹配的范围越大
        {
            auto a = users[i], b = users[j];
            double score_diff = abs(a.user.score - b.user.score);  //两者的分差
            double a_range = difftime(end_time, a.start_time) * 10;     //用户a可以匹配的范围
            double b_range = difftime(end_time, b.start_time) * 10;     //用户b可以匹配的范围
            return score_diff <= a_range && score_diff <= b_range;
        }

        bool match()
        {
            // 如果匹配结束后，匹配池里面依旧存在多于两个用户，说明这两个用户分差过大，那么就需要每间隔1秒唤醒consume进程继续匹配。
            // 根据wait_seconds来进行排序匹配
            sort(users.begin(), users.end(), [](Player &a, Player &b){
                return a.start_time < b.start_time;  //优先匹配等待时间长的
            });
            while(users.size() > 1)   //匹配
            {
                bool is_match = false;
                for(int32_t i = 0; i < users.size(); i ++ ) {
                    for(int32_t j = i + 1; j < users.size(); j ++ ) {
                        time_t end_time = time(NULL);
                        if(check(i, j, end_time)) {
                            save_match_result(users[i], users[j], end_time);
                            users.erase(users.begin() + j);
                            users.erase(users.begin() + i);
                            is_match = true;
                            break;
                        }
                    }
                    if(is_match) break;
                }
                if(!is_match) break;
            }
            return users.size() > 1;
        }

}pool;

// consume: consume the task of message_queue
void consume()
{
    while(true)  //do task
    {
        // unique_lock: std::unique_lock 对象 lck 的构造函数将 message_queue.m 作为参数，因此在构造 lck 对象时，会自动锁定 message_queue.m 所代表的互斥量。这样，您就获得了对互斥量的独占访问权限。
        // 当 lck 对象超出其作用域时，即离开其定义的代码块，std::unique_lock 对象的析构函数会自动释放互斥量，从而解除锁定。
        unique_lock<mutex> lck(message_queue.m); 
        if(message_queue.q.empty()) {
            if(!pool.match()) {   //消息队列为空后，尝试做匹配
                // 前期没有用户来匹配，死循环占用cpu为百分百,需要阻塞住
                message_queue.cv.wait(lck);  //被阻塞后，会自动释放锁lck.unlock()。被唤醒后，会自动抢占锁lck.lock()。
                lck.unlock();
            }else {  //每间隔1秒来唤醒自身，这样能做到cpu尽可能不浪费,不然也会死循环一段时间，导致cpu占用率达到100%
                lck.unlock();
                sleep(1);  //会让线程进入阻塞状态，不会占用cpu资源
            }
        }else{  //do task
            auto t = message_queue.q.front();message_queue.q.pop();
            // release mutex
            lck.unlock();
            if(t.op == "add") {
                pool.add(t.user);
            }else if(t.op == "remove") {
                pool.remove(t.user);
            }
            pool.match();  //匹配池里面的用户没匹配完也不影响，后面一定会进入到if(q.empty())分支
        }
    }
}

class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }

  int32_t add(const User& user) {  //add add user task
    // Your implementation goes here
    printf("add user: %d %s\n", user.id, user.username.c_str());
    // lock
    unique_lock<mutex> lck(message_queue.m);
    message_queue.q.push({"add", user});
    lck.unlock();

    // 唤醒被阻塞的进程
    message_queue.cv.notify_all();
    // printf("the userid is: %d, the username is: %s, the score is: %d\n", user.id, user.username.c_str(), user.score);
    return 0;
  }

  int32_t remove(const User& user) { //add remove user task
    // Your implementation goes here
    printf("remove user: %d %s\n", user.id, user.username.c_str());
    //lock
    unique_lock<mutex> lck(message_queue.m);
    message_queue.q.push({"remove", user});
    lck.unlock();

    // 唤醒被阻塞的进程
    message_queue.cv.notify_all();
    return 0;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
  ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

  thread consumer(consume);
  
  cout << "start match server" << endl;
  server.serve();
  return 0;
}

