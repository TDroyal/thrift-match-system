// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>
#include <queue>
#include <mutex>
#include <thread>
#include <condition_variable>
#include <time.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match;
using namespace std;

// product-consume
typedef struct Task {
    std::string op;  //task type: "add" or "remove"
    User user;
}task;

// message_queue:  common resource
struct MessageQueue {
    queue<task> q;
    mutex m;
    condition_variable cv;   //条件变量
}message_queue;


// 封装一下进入匹配池的用户信息（额外加一个进入匹配池的时间戳）
typedef struct UserInfo {
    User user;
    time_t start_time;   //进入匹配池的时间戳
}Player;

class Pool {
    private:
        vector<Player> users;
        //每个用户进入匹配池后，都需要记一个时间戳，防止分数相差过大，一直匹配不上的问题（解决匹配饥饿问题）
    public:
        void add(User &user)
        {
            users.push_back({user, time(NULL)});
        }

        void remove(User &user)
        {
            int32_t id =  user.id;
            for(int32_t i = 0; i < users.size(); i ++ )
            {
                if(id == users[i].user.id) {
                    users.erase(users.begin() + i);
                    break;
                }
            }
        }
        
        void save_match_result(User &a, User &b)
        {
            printf("match result: %d %d\n", a.id, b.id);
        }

        void match()
        {
            while(users.size() > 1)
            {
                Player a = users[0];
                Player b = users[1];
                users.erase(users.begin());
                users.erase(users.begin());
                save_match_result(a.user, b.user);
                time_t end_time = time(NULL);
                printf("匹配时长：%.1f %.1f\n", difftime(end_time, a.start_time), difftime(end_time, b.start_time));
                break;
            }
        }

}pool;

// consume: consume the task of message_queue
void consume()
{
    while(true)  //do task
    {
        unique_lock<mutex> lck(message_queue.m);
        if(message_queue.q.empty()) {
            pool.match();   //消息队列为空后，尝试做匹配
            // 前期没有用户来匹配，死循环占用cpu为百分百,需要阻塞住
            message_queue.cv.wait(lck);  //被阻塞后，会自动释放锁lck.unlock()。被唤醒后，会自动抢占锁lck.lock()。
            lck.unlock();
        }else{  //do task
            auto t = message_queue.q.front();message_queue.q.pop();
            // release mutex
            lck.unlock();
            if(t.op == "add") {
                pool.add(t.user);
            }else if(t.op == "remove") {
                pool.remove(t.user);
            }
            pool.match();
        }
    }
}

class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }

  int32_t add(const User& user) {  //add add user task
    // Your implementation goes here
    printf("add user: %d %s\n", user.id, user.username.c_str());
    // lock
    unique_lock<mutex> lck(message_queue.m);
    message_queue.q.push({"add", user});
    lck.unlock();

    // 唤醒被阻塞的进程
    message_queue.cv.notify_all();
    // printf("the userid is: %d, the username is: %s, the score is: %d\n", user.id, user.username.c_str(), user.score);
    return 0;
  }

  int32_t remove(const User& user) { //add remove user task
    // Your implementation goes here
    printf("remove user: %d %s\n", user.id, user.username.c_str());
    //lock
    unique_lock<mutex> lck(message_queue.m);
    message_queue.q.push({"remove", user});
    lck.unlock();

    // 唤醒被阻塞的进程
    message_queue.cv.notify_all();
    return 0;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
  ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

  thread consumer(consume);
  
  cout << "start match server" << endl;
  server.serve();
  return 0;
}

